name: CI-CD, Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

env:
  BUILD_PATH: "./packages/cps-global-components/dist/cps-global-components.*"
  BUILD_ARTIFACT_NAME: build-artifact
  CACHE_CONTROL: "max-age=20, stale-while-revalidate=3600, stale-if-error=3600"
  DEPLOY_ENVIRONMENT: ci-cd-test

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./packages/cps-global-components
    outputs:
      artifact-id: ${{ steps.upload.outputs.artifact-id }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile

      - run: pnpm -C ../cps-global-configuration build

      # - run: pnpm run lint
      #   continue-on-error: false

      - run: pnpm test
        env:
          CI: true

      # - run: pnpm run test:coverage
      #   continue-on-error: true

      - run: pnpm run build

      - run: pnpm -w run validate

      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: ${{env.BUILD_ARTIFACT_NAME}}
          path: ${{ env.BUILD_PATH }}
          retention-days: 1

  generate-matrix:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    outputs:
      environments: ${{ steps.set-environments.outputs.environments }}
    steps:
      - uses: actions/checkout@v4

      - name: List files and create JSON matrix
        id: set-environments
        run: |
          files=$(ls ./configuration | jq -R . | jq -s -c . |  jq 'map(capture("config\\.(?<environment>[A-Za-z0-9]+)\\.json") | .environment)' | jq -c .)
          echo "Files found: $files"
          echo "environments=$files" >> "$GITHUB_OUTPUT"

  deploy:
    needs: generate-matrix
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.generate-matrix.outputs.environments) }}

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        id: download
        with:
          artifact-ids: ${{needs.build-and-test.outputs.artifact-id}}

      - run: cp ./configuration/config.${{matrix.environment}}.json ${{ steps.download.outputs.download-path }}/${{env.BUILD_ARTIFACT_NAME}}/config.json

      - uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage container create \
              --name ${{matrix.environment}} \
              --public-access container \
              --connection-string "${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}"

      - uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch \
              --destination ${{matrix.environment}} \
              --source "${{ steps.download.outputs.download-path }}/${{env.BUILD_ARTIFACT_NAME}}" \
              --connection-string "${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}" \
              --overwrite \
              --content-cache-control ${{env.CACHE_CONTROL}}

  repo-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile

      - run: pnpm audit --audit-level high

      - uses: actions/dependency-review-action@v4

  org-security-scan:
    if: github.event_name == 'pull_request'

    permissions:
      security-events: write
      statuses: write

    uses: CPS-Innovation/.github/.github/workflows/security-scan.yml@main
