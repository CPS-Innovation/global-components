name: CI-CD, Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

env:
  BUILD_ARTIFACT_NAME: build-artifact

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    outputs:
      environments: ${{ steps.set-environments.outputs.environments }}
    steps:
      - uses: actions/checkout@v4

      - name: List files and create JSON matrix
        id: set-environments
        run: |
          files=$(ls ./configuration | grep 'config\.[^\\.]*\.json' | jq -R . | jq -s -c . |  jq 'map(capture("config\\.(?<environment>[A-Za-z0-9_-]+)\\.json") | .environment)' | jq -c .)
          echo "Files found: $files"
          echo "environments=$files" >> "$GITHUB_OUTPUT"

  build-and-test:
    runs-on: ubuntu-latest

    outputs:
      artifact-id: ${{ steps.upload.outputs.artifact-id }}

    steps:
      - uses: actions/checkout@v4

      - uses: benjlevesque/short-sha@v3.0
        id: short-sha

      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - run: pnpm install
        env:
          CI: true

      - run: pnpm --filter "./packages/*" build

      # - run: pnpm run lint
      #   continue-on-error: false

      - run: pnpm --filter cps-global-components test

      # - run: pnpm run test:coverage
      #   continue-on-error: true

      - run: pnpm --filter cps-global-configuration validate

      - run: 'pnpm --filter cps-global-components run rollup --intro ''window.cps_global_components_build = {Sha: "${{ steps.short-sha.outputs.sha }}", RunId: "${{ github.run_number }}", Timestamp: "${{ github.event.repository.updated_at }}"};'''

      - run: |
          cp -r ./packages/cps-global-components/dist/cps-global-components.js ./e2e/harness
          pnpm --filter e2e test

      - run: |
          rm -rf ./to-deploy
          mkdir -p ./to-deploy
          cp ./packages/cps-global-components/dist/cps-global-components.js ./to-deploy
          cp ./packages/cps-global-components/dist/cps-global-components.js.map ./to-deploy
          cp ./packages/cps-global-os-handover/dist/auth-handover.js ./to-deploy

      - uses: actions/upload-artifact@v4
        id: upload
        with:
          name: ${{env.BUILD_ARTIFACT_NAME}}
          path: |
            ./to-deploy/*
          retention-days: 30

  deploy-preprod-environments:
    needs: [generate-matrix, build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.generate-matrix.outputs.environments) }}
        exclude:
          - environment: prod
    uses: ./.github/workflows/deploy-environment.yml
    with:
      environment: ${{ matrix.environment }}
      artifact-name: build-artifact
      artifact-id: ${{ needs.build-and-test.outputs.artifact-id }}
    secrets:
      BLOB_STORAGE_CONNECTION_STRING: ${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}
    permissions:
      contents: write

  deploy-home-page:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob delete-batch \
                --source '$web' \
                --pattern "home/*" \
                --connection-string "${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}"

            az storage blob upload-batch \
              --destination "\$web/home" \
              --source "./apps/home" \
              --connection-string "${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}"

  repo-security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - run: pnpm install --frozen-lockfile

      - run: pnpm audit --audit-level high

      - uses: actions/dependency-review-action@v4

  org-security-scan:
    if: github.event_name == 'pull_request'

    permissions:
      security-events: write
      statuses: write

    uses: CPS-Innovation/.github/.github/workflows/security-scan.yml@main
